"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class IA(object):

    __slots__ = ["id", "x_position", "y_position", "speed"]

    __typenames__ = ["int8_t", "double", "double", "double"]

    __dimensions__ = [None, None, None, None]

    def __init__(self):
        self.id = 0
        """ LCM Type: int8_t """
        self.x_position = 0.0
        """ LCM Type: double """
        self.y_position = 0.0
        """ LCM Type: double """
        self.speed = 0.0
        """ LCM Type: double """

    def encode(self):
        buf = BytesIO()
        buf.write(IA._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bddd", self.id, self.x_position, self.y_position, self.speed))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != IA._get_packed_fingerprint():
            raise ValueError("Decode error")
        return IA._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = IA()
        self.id, self.x_position, self.y_position, self.speed = struct.unpack(">bddd", buf.read(25))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if IA in parents: return 0
        tmphash = (0xf041e503c68686a0) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if IA._packed_fingerprint is None:
            IA._packed_fingerprint = struct.pack(">Q", IA._get_hash_recursive([]))
        return IA._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", IA._get_packed_fingerprint())[0]

